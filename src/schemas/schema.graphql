enum Role {
  USER
  ADMIN
}

interface IdentifiableById {
  id: Int!
}

type CV implements IdentifiableById {
  id: Int!
  name: String!
  age: String!
  job: String!
  skills: [Skill]
  user: User!
}

type Skill implements IdentifiableById {
  id: Int!
  designation: String!
  cvs: [CV]
}

type User implements IdentifiableById {
  id: Int!
  name: String!
  email: String!
  role: Role!
  cvs: [CV]
}

type Query {
  cvs: [CV]!
  cvById(id: Int!): CV
}

input CreateCVInput {
  name: String!
  age: String!
  job: String!
  skillIds: [Int]
  user: Int!
}

input UpdateCVInput {
  name: String
  age: String
  job: String
  skillIds: [Int]
  user: Int
}

type Mutation {
  createCV(input: CreateCVInput!): CV
  updateCV(id: Int!, input: UpdateCVInput!): CV
  deleteCV(id: Int!): Boolean!
}

type Subscription {
  CVUpdates: CV!
}
